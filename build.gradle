plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'application'
    id 'distribution'
}

ext {
    driverVersion = '4.8.2'
    group = 'com.wisecoders.dbschema'
    archivesBaseName = 'mongodb-jdbc-driver'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.mongodb:mongodb-driver-sync:5.2.1'
    implementation "org.graalvm.sdk:graal-sdk:24.1.0"
    implementation 'org.graalvm.js:js:24.1.0'
    implementation 'org.graalvm.js:js-scriptengine:24.1.0'
    implementation 'org.graalvm.truffle:truffle-api:24.1.0'
    implementation 'com.google.code.gson:gson:2.11.0'
    testImplementation 'junit:junit:4.13.2'
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    withJavadocJar()
    withSourcesJar()
}

tasks.compileJava {
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath
        ]
    }
}

tasks.jar {
    archiveFileName.set("mongojdbc${driverVersion}.jar")
    manifest {
        attributes(
                'Main-Class': 'com.wisecoders.dbschema.mongodb.JdbcDriver',
                'Class-Path': configurations.runtimeClasspath.files.collect { it.name }.join(' '),
                'Specification-Version': driverVersion,
                'Specification-Vendor': 'Wise Coders',
                'Implementation-Vendor-Id': 'dbschema.com',
                'Implementation-Vendor': 'Wise Coders',
                'Implementation-Version': new Date().format('yyMMdd')
        )
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'com.wisecoders.dbschema'
            artifactId = 'mongodb-jdbc-driver'
            version = driverVersion

            from components.java

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            pom {
                name.set('MongoDB-JDBC-Driver')
                description.set('MongoDB JDBC Driver')
                url.set('https://dbschema.com/jdbc-driver/MongoDb.html')

                licenses {
                    license {
                        name.set('GPL-3Plus dual license. Contributions only to https://github.com/wise-coders/mongodb-jdbc-driver')
                        url.set('https://github.com/wise-coders/mongodb-jdbc-driver')
                    }
                }
                developers {
                    developer {
                        id.set('wisecoders')
                        name.set('Wise Coders GmbH')
                        email.set('support@wisecoders.com')
                    }
                }
                scm {
                    connection.set('scm:git:git://github.com/wise-coders/mongodb-jdbc-driver')
                    developerConnection.set('scm:git:ssh://github.com/wise-coders/mongodb-jdbc-driver')
                    url.set('https://github.com/wise-coders/mongodb-jdbc-driver')
                }
            }
        }
    }

    repositories {
        maven {
            name = "OSSRH"
            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = project.properties["sonatypeUsername"]
                password = project.properties["sonatypePassword"]
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

tasks.register('zip', Zip) {
    dependsOn 'clean', 'jar'
    archiveFileName.set('MongoDbJdbcDriver.zip')
    from configurations.runtimeClasspath.allArtifacts.files
    from configurations.runtimeClasspath
    from "build/libs" include "*.jar"
}

tasks.register('tar', Tar) {
    dependsOn 'clean', 'jar'
    archiveFileName.set('MongoDbJdbcDriver.tar')
    from configurations.runtimeClasspath.allArtifacts.files
    from configurations.runtimeClasspath
    from "build/libs" include "*.jar"
}

tasks.register('copyInUserHome', Copy) {
    dependsOn 'clean', 'jar'
    from configurations.runtimeClasspath.allArtifacts.files
    from configurations.runtimeClasspath
    from "build/libs" include "*.jar"
    into "${System.getProperty('user.home')}/.DbSchema/drivers/MongoDb/"
}

tasks.javadoc {
    options.addBooleanOption('html5', true)
}

artifacts {
    archives tasks.javadocJar, tasks.sourcesJar
}

/*
remotes {
    webServer {
        host = websiteHost
        user = websiteUser
        password = websitePassword
    }
}
task uploadWeb {
    doLast {
        ssh.settings {
            knownHosts = allowAnyHosts
            fileTransfer = 'scp'
        }
        ssh.run {
            session(remotes.webServer) {
                fileTree("$buildDir/distributions").visit { FileVisitDetails details ->
                    println "Copy $details.file.path ..."
                    put from: "$details.file.path", into: 'web/jdbc-drivers'
                }
            }
        }
    }
}
*/
/* EXTRACT COMPLETION KEYWORDS. THIS SHOULD PRINT ON SCREEN SOME TEXT
def listMethodNames = { clz ->
                def result = []
                clz.metaClass.methods.each { method ->
                  if ( method.isPublic() && ( !'equals'.equals(method.name) && !'notify'.equals(method.name) && !'notifyAll'.equals(method.name) && !'wait'.equals(method.name) && !'hashCode'.equals(method.name) )){
                    StringBuilder sbParams = new StringBuilder()
                    for( Class paramType : method.nativeParameterTypes ){
                      if ( sbParams.length() > 0 ) sbParams.append(", ")
                      if ( 'Map'.equals(paramType.getSimpleName()) || 'Bson'.equals(paramType.getSimpleName())){
                       sbParams.append("{ }")
                      } else {
                       sbParams.append(paramType.getSimpleName())
                      }
                    }
                    result.add( "${clz.getSimpleName()}|${method.name}(${sbParams})|${method.returnType.getSimpleName()}\\n\\" )
                    //println "${clz.getSimpleName()}|${method.name}(${method.nativeParameterTypes*.getSimpleName().join( ', ' )})|${method.returnType.getSimpleName()}\\n\\"
                  }
                }
                for ( String str : result.unique() ){
                 println str
               }
            }
            listMethodNames( com.dbschema.mongo.JMongoDatabase.class )
            listMethodNames( com.dbschema.mongo.JMongoCollection.class )
            listMethodNames( com.dbschema.mongo.JFindIterable.class )
 */
