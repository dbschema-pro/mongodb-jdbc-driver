com.xenoamess:nashorn:jdk8u265-b01-x3
Created issue: https://github.com/XenoAmess/nashorn_maven/issues/1


gradle:
    compile "com.xenoamess:nashorn:jdk8u265-b01-x3"


########################################

In MongoPreparedStatement


 // ************** NASHORN ENGINE  ***************
            // Without setting the context class loader I get errors about org.bson.types.ObjectId not found
            Thread.currentThread().setContextClassLoader(org.bson.types.ObjectId.class.getClassLoader());

            ScriptEngine engine = new ScriptEngineManager().getEngineByName("Nashorn");
            Bindings bindings = engine.getBindings(ScriptContext.ENGINE_SCOPE);
            bindings.put("polyglot.js.allowHostAccess", true);
            bindings.put("polyglot.js.allowHostClassLookup", (Predicate<String>) s -> true);

            boolean dbIsSet = false;
            final Bindings binding = engine.getContext().getBindings(ScriptContext.ENGINE_SCOPE);
            for ( WrappedMongoDatabase db : con.getDatabases() ){
                binding.put( db.getName(), db);
                if ( con.getCatalog() != null && con.getCatalog().equals(db.getName())){
                    binding.put( "db", db );
                    dbIsSet = true;
                }
            }
            if ( !dbIsSet ){
                binding.put( "db", con.getDatabase("admin"));
            }
            binding.put("client", con);
            final String script = "var ObjectId = function( oid ) { return new org.bson.types.ObjectId( oid );}\n" +
                    "" +
                    "var ISODate = function( str ) { " +
                    "var formats = [\"yyyy-MM-dd'T'HH:mm:ss'Z'\", \"yyyy-MM-dd'T'HH:mm.ss'Z'\", \"yyyy-MM-dd'T'HH:mm:ss\", \"yyyy-MM-dd' 'HH:mm:ss\",\"yyyy-MM-dd'T'HH:mm:ssXXX\"];\n" +
                    "\n" +
                    "for (i = 0; i < formats.length; i++)  {\n" +
                    "    try {\n" +
                    "        return new java.text.SimpleDateFormat( formats[i] ).parse(str);\n" +
                    "    } catch (error) { }\n" +
                    "}\n" +
                    "throw new java.text.ParseException(\"Un-parsable ISO date: \" + str + \" Configured formats: \" + formats, 0);" +
                    "return null;" +
                    "};\n\n" +

                    "var Date = function( str ) { " +
                    "var formats = [\"yyyy-MM-dd\", \"dd-MM-yyyy\", \"dd.MM.yyyy\", \"d.MM.yyyy\", \"dd/MM/yyyy\", \"yyyy.MM.dd\", \"M/d/yyyy\" ];\n" +
                    "\n" +
                    "for (i = 0; i < formats.length; i++)  {\n" +
                    "    try {\n" +
                    "        return new java.text.SimpleDateFormat( formats[i] ).parse(str);\n" +
                    "    } catch (error) { }\n" +
                    "}\n" +
                    "throw new java.text.ParseException(\"Un-parsable date: \" + str + \" Configured formats: \" + formats, 0);" +
                    "return null;" +
                    "}";

            //"var ISODate = function( str ) { return new java.text.SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\").parse(str);}";
            engine.eval(script);
            Object obj = engine.eval(query);
            if ( obj instanceof Iterable){
                lastResultSet = new ResultSetIterator( ((Iterable)obj).iterator(), con.client.expandResultSet );
            } else if ( obj instanceof Iterator){
                lastResultSet = new ResultSetIterator( (Iterator)obj, con.client.expandResultSet );
            } else if ( obj instanceof WrappedMongoCollection ){
                lastResultSet = new ResultSetIterator( ((WrappedMongoCollection)obj).find(), con.client.expandResultSet );
            } else if ( obj != null ){
                lastResultSet = new ObjectAsResultSet( obj );
            }
            return lastResultSet;

        } catch ( Throwable ex ){
            throw new SQLException( ex.getMessage(), ex );
        }

############################################


package com.dbschema.wrappers;

import GraalConvertor;
import com.mongodb.BasicDBObject;
import com.mongodb.ReadPreference;
import com.mongodb.WriteConcern;
import com.mongodb.client.ListCollectionsIterable;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.MongoIterable;
import com.mongodb.client.model.CreateCollectionOptions;
import jdk.nashorn.api.scripting.AbstractJSObject;
import org.bson.BsonDocument;
import org.bson.Document;
import org.bson.codecs.configuration.CodecRegistry;
import org.bson.conversions.Bson;

import java.util.List;
import java.util.Map;

import static GraalConvertor.toBson;


/**
 * Wrapper class around MongoDatabase with direct access to collections as member variables.
 * Copyright Wise Coders Gmbh. BSD License-3. Free to use, distribution forbidden. Improvements of the driver accepted only in https://bitbucket.org/dbschema/mongodb-jdbc-driver.
 */
public class WrappedMongoDatabase extends AbstractJSObject {

    private final MongoDatabase mongoDatabase;

    WrappedMongoDatabase(MongoDatabase mongoDatabase ){
        this.mongoDatabase = mongoDatabase;
    }

    public String getName() {
        return mongoDatabase.getName();
    }

    public CodecRegistry getCodecRegistry() {
        return mongoDatabase.getCodecRegistry();
    }

    public ReadPreference getReadPreference() {
        return mongoDatabase.getReadPreference();
    }

    public WriteConcern getWriteConcern() {
        return mongoDatabase.getWriteConcern();
    }

    public WrappedMongoDatabase withCodecRegistry(CodecRegistry codecRegistry) {
        mongoDatabase.withCodecRegistry(codecRegistry);
        return this;
    }

    public WrappedMongoDatabase withReadPreference(ReadPreference readPreference) {
        mongoDatabase.withReadPreference(readPreference);
        return this;
    }

    public WrappedMongoDatabase withWriteConcern(WriteConcern writeConcern) {
        mongoDatabase.withWriteConcern(writeConcern );
        return this;
    }

    public WrappedMongoCollection<Document> getCollection(String s) {
        return new WrappedMongoCollection<>(mongoDatabase.getCollection(s ));
    }

    public <TDocument> WrappedMongoCollection<TDocument> getCollection(String s, Class<TDocument> tDocumentClass) {
        return new WrappedMongoCollection<TDocument>( mongoDatabase.getCollection( s, tDocumentClass ) );
    }

    public Document runCommand(String str) {
        return mongoDatabase.runCommand( BasicDBObject.parse(str) ) ;
    }

    public Document runCommand( Map map ){
        return mongoDatabase.runCommand( toBson(map));
    }

    public Document runCommand(Bson bson, ReadPreference readPreference) {
        return mongoDatabase.runCommand( bson, readPreference );
    }

    public <TResult> TResult runCommand(Bson bson, Class<TResult> tResultClass) {
        return mongoDatabase.runCommand(bson, tResultClass);
    }

    public <TResult> TResult runCommand(Bson bson, ReadPreference readPreference, Class<TResult> tResultClass) {
        return mongoDatabase.runCommand( bson, readPreference,  tResultClass);
    }

    public void drop() {
        mongoDatabase.drop();
    }

    public MongoIterable<String> listCollectionNames() {
        return mongoDatabase.listCollectionNames();
    }

    public ListCollectionsIterable<Document> listCollections() {
        return mongoDatabase.listCollections();
    }

    public <TResult> ListCollectionsIterable<TResult> listCollections(Class<TResult> tResultClass) {
        return mongoDatabase.listCollections(tResultClass);
    }

    public void createCollection( String s ) {
        mongoDatabase.createCollection( s );
    }

    public void createCollection(String s, CreateCollectionOptions createCollectionOptions) {
        mongoDatabase.createCollection(s, createCollectionOptions);
    }

    /*
     *******  RHINO
     * We overwrite this methods in order to support direct access to collections.
     * Calling db.myCollection will return myCollection.
     * @param name The name of the member
     * @param start Scriptable
     * @return true if exists
     */
    /*
    @Override
    public boolean has(String name, Scriptable start) {
        if ( getCollection(name ) != null ) return true;
        return super.has(name, start);
    }

    @Override
    public Object get(String name, Scriptable start) {
        if ( getCollection( name ) != null ){
            return getCollection(name);
        }
        return super.get(name, start);
    }
*/

    // **** NASHORN
    // https://wiki.openjdk.java.net/display/Nashorn/Nashorn+extensions
    // http://sites.psu.edu/robertbcolton/2015/07/31/java-8-nashorn-script-engine/

    @Override
    public boolean hasMember(String name) {
        return "getCollection".equals( name ) ||
                "createCollection".equals(name)||
                "createView".equals(name)||
                "getReadConcern".equals(name)||
                "listCollections".equals(name)||
                "listCollectionNames".equals(name)||
                "getViewSource".equals(name)||
                "drop".equals(name)||
                "runCommand".equals(name);
    }

    @Override
    public Object getMember(final String name) {
        if ( hasMember( name ) ){
            return new AbstractJSObject() {
                @Override
                public Object call(Object thiz, Object... args) {
                    switch( name ) {
                        case "getCollection":
                            if (args.length == 1 && args[0] instanceof String) {
                                return getCollection((String) args[0]);
                            }
                            break;
                        case "createCollection":
                            if (args.length == 1 && args[0] instanceof String) {
                                createCollection((String) args[0]);
                            } else if (args.length == 2 && args[0] instanceof String && args[1] instanceof CreateCollectionOptions) {
                                createCollection((String) args[0], (CreateCollectionOptions) args[1]);
                            }
                            break;
                        case "createView":
                            if (args.length == 3 && args[0] instanceof String && args[1] instanceof String) {
                                mongoDatabase.createView((String) args[0], (String) args[1], Util.toBsonList(args[2]));
                            }
                            break;
                        case "runCommand":
                            if (args.length == 1 && args[0] instanceof String) {
                                runCommand((String) args[0]);
                            } else if (args.length == 1 && args[0] instanceof Map) {
                                runCommand((Map) args[0]);
                            } else if (args.length == 2 && args[0] instanceof Bson && args[1] instanceof Class) {
                                runCommand((Bson) args[0], (Class) args[0]);
                            }
                            break;
                        case "drop":
                            drop();
                            break;
                        case "listCollectionNames":
                            return listCollectionNames();
                        case "listCollections":
                            return listCollections();
                        case "getViewSource":
                            if (args.length == 1 && args[0] instanceof String) {
                                for (Document doc : listCollections()) {
                                    if ( args[0].equals( doc.get("name")) && "view".equals(doc.get("type"))) {
                                        Document options = (Document)doc.get("options");
                                        final StringBuilder sb = new StringBuilder();
                                        sb.append(getName()).append(".createView(\n\t\"");
                                        sb.append(doc.get("name")).append("\",\n\t\"").
                                                append(options.get("viewOn")).
                                                append("\",\n\t[\n\t\t");
                                        boolean addComma = false;
                                        for ( Object d : (List)options.get("pipeline")) {
                                            if ( addComma) sb.append(",\n\t\t");
                                            if ( d instanceof Document){
                                                sb.append( ((Document)d).toJson() );
                                            }else {
                                                sb.append( d);
                                            }
                                            addComma = true;
                                        }
                                        sb.append("\n\t]\n)");
                                        return sb.toString();
                                    }
                                }
                            }
                            return null;
                    }
                    return ( args.length == 1 ) ? getCollection(String.valueOf(args[0])) : null;
                }
                @Override
                public boolean isFunction() {
                    return true;
                }
            };
        }
        return getCollection( name );
    }


    @Override
    public String toString() {
        return getName();
    }



}
